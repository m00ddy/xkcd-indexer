// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	db "github.com/ripp4rd0c/xkcd/db"
	mock "github.com/stretchr/testify/mock"
)

// ComicsDB is an autogenerated mock type for the ComicsDB type
type ComicsDB struct {
	mock.Mock
}

// FlushBatch provides a mock function with given fields: _a0
func (_m *ComicsDB) FlushBatch(_a0 []*db.Comic) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FlushBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*db.Comic) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LastComic provides a mock function with given fields:
func (_m *ComicsDB) LastComic() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastComic")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryComics provides a mock function with given fields: _a0
func (_m *ComicsDB) QueryComics(_a0 ...string) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryComics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewComicsDB creates a new instance of ComicsDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComicsDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComicsDB {
	mock := &ComicsDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
